package com.nuneskris.study.gcp.pubsub;

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CricketScore extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8019432784322700848L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CricketScore\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"inning\",\"type\":\"int\"},{\"name\":\"over\",\"type\":\"int\"},{\"name\":\"ball\",\"type\":\"int\"},{\"name\":\"batsman\",\"type\":\"string\"},{\"name\":\"non_striker\",\"type\":\"string\"},{\"name\":\"bowler\",\"type\":\"string\"},{\"name\":\"batsman_runs\",\"type\":\"int\"},{\"name\":\"extra_runs\",\"type\":\"int\"},{\"name\":\"total_runs\",\"type\":\"int\"},{\"name\":\"non_boundary\",\"type\":\"int\"},{\"name\":\"is_wicket\",\"type\":\"int\"},{\"name\":\"dismissal_kind\",\"type\":\"string\"},{\"name\":\"player_dismissed\",\"type\":\"string\"},{\"name\":\"fielder\",\"type\":\"string\"},{\"name\":\"extras_type\",\"type\":\"string\"},{\"name\":\"batting_team\",\"type\":\"string\"},{\"name\":\"bowling_team\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CricketScore> ENCODER =
      new BinaryMessageEncoder<CricketScore>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CricketScore> DECODER =
      new BinaryMessageDecoder<CricketScore>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CricketScore> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CricketScore> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CricketScore> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CricketScore>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CricketScore to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CricketScore from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CricketScore instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CricketScore fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private int inning;
  private int over;
  private int ball;
  private java.lang.CharSequence batsman;
  private java.lang.CharSequence non_striker;
  private java.lang.CharSequence bowler;
  private int batsman_runs;
  private int extra_runs;
  private int total_runs;
  private int non_boundary;
  private int is_wicket;
  private java.lang.CharSequence dismissal_kind;
  private java.lang.CharSequence player_dismissed;
  private java.lang.CharSequence fielder;
  private java.lang.CharSequence extras_type;
  private java.lang.CharSequence batting_team;
  private java.lang.CharSequence bowling_team;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CricketScore() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param inning The new value for inning
   * @param over The new value for over
   * @param ball The new value for ball
   * @param batsman The new value for batsman
   * @param non_striker The new value for non_striker
   * @param bowler The new value for bowler
   * @param batsman_runs The new value for batsman_runs
   * @param extra_runs The new value for extra_runs
   * @param total_runs The new value for total_runs
   * @param non_boundary The new value for non_boundary
   * @param is_wicket The new value for is_wicket
   * @param dismissal_kind The new value for dismissal_kind
   * @param player_dismissed The new value for player_dismissed
   * @param fielder The new value for fielder
   * @param extras_type The new value for extras_type
   * @param batting_team The new value for batting_team
   * @param bowling_team The new value for bowling_team
   */
  public CricketScore(java.lang.CharSequence id, java.lang.Integer inning, java.lang.Integer over, java.lang.Integer ball, java.lang.CharSequence batsman, java.lang.CharSequence non_striker, java.lang.CharSequence bowler, java.lang.Integer batsman_runs, java.lang.Integer extra_runs, java.lang.Integer total_runs, java.lang.Integer non_boundary, java.lang.Integer is_wicket, java.lang.CharSequence dismissal_kind, java.lang.CharSequence player_dismissed, java.lang.CharSequence fielder, java.lang.CharSequence extras_type, java.lang.CharSequence batting_team, java.lang.CharSequence bowling_team) {
    this.id = id;
    this.inning = inning;
    this.over = over;
    this.ball = ball;
    this.batsman = batsman;
    this.non_striker = non_striker;
    this.bowler = bowler;
    this.batsman_runs = batsman_runs;
    this.extra_runs = extra_runs;
    this.total_runs = total_runs;
    this.non_boundary = non_boundary;
    this.is_wicket = is_wicket;
    this.dismissal_kind = dismissal_kind;
    this.player_dismissed = player_dismissed;
    this.fielder = fielder;
    this.extras_type = extras_type;
    this.batting_team = batting_team;
    this.bowling_team = bowling_team;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return inning;
    case 2: return over;
    case 3: return ball;
    case 4: return batsman;
    case 5: return non_striker;
    case 6: return bowler;
    case 7: return batsman_runs;
    case 8: return extra_runs;
    case 9: return total_runs;
    case 10: return non_boundary;
    case 11: return is_wicket;
    case 12: return dismissal_kind;
    case 13: return player_dismissed;
    case 14: return fielder;
    case 15: return extras_type;
    case 16: return batting_team;
    case 17: return bowling_team;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: inning = (java.lang.Integer)value$; break;
    case 2: over = (java.lang.Integer)value$; break;
    case 3: ball = (java.lang.Integer)value$; break;
    case 4: batsman = (java.lang.CharSequence)value$; break;
    case 5: non_striker = (java.lang.CharSequence)value$; break;
    case 6: bowler = (java.lang.CharSequence)value$; break;
    case 7: batsman_runs = (java.lang.Integer)value$; break;
    case 8: extra_runs = (java.lang.Integer)value$; break;
    case 9: total_runs = (java.lang.Integer)value$; break;
    case 10: non_boundary = (java.lang.Integer)value$; break;
    case 11: is_wicket = (java.lang.Integer)value$; break;
    case 12: dismissal_kind = (java.lang.CharSequence)value$; break;
    case 13: player_dismissed = (java.lang.CharSequence)value$; break;
    case 14: fielder = (java.lang.CharSequence)value$; break;
    case 15: extras_type = (java.lang.CharSequence)value$; break;
    case 16: batting_team = (java.lang.CharSequence)value$; break;
    case 17: bowling_team = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'inning' field.
   * @return The value of the 'inning' field.
   */
  public int getInning() {
    return inning;
  }


  /**
   * Sets the value of the 'inning' field.
   * @param value the value to set.
   */
  public void setInning(int value) {
    this.inning = value;
  }

  /**
   * Gets the value of the 'over' field.
   * @return The value of the 'over' field.
   */
  public int getOver() {
    return over;
  }


  /**
   * Sets the value of the 'over' field.
   * @param value the value to set.
   */
  public void setOver(int value) {
    this.over = value;
  }

  /**
   * Gets the value of the 'ball' field.
   * @return The value of the 'ball' field.
   */
  public int getBall() {
    return ball;
  }


  /**
   * Sets the value of the 'ball' field.
   * @param value the value to set.
   */
  public void setBall(int value) {
    this.ball = value;
  }

  /**
   * Gets the value of the 'batsman' field.
   * @return The value of the 'batsman' field.
   */
  public java.lang.CharSequence getBatsman() {
    return batsman;
  }


  /**
   * Sets the value of the 'batsman' field.
   * @param value the value to set.
   */
  public void setBatsman(java.lang.CharSequence value) {
    this.batsman = value;
  }

  /**
   * Gets the value of the 'non_striker' field.
   * @return The value of the 'non_striker' field.
   */
  public java.lang.CharSequence getNonStriker() {
    return non_striker;
  }


  /**
   * Sets the value of the 'non_striker' field.
   * @param value the value to set.
   */
  public void setNonStriker(java.lang.CharSequence value) {
    this.non_striker = value;
  }

  /**
   * Gets the value of the 'bowler' field.
   * @return The value of the 'bowler' field.
   */
  public java.lang.CharSequence getBowler() {
    return bowler;
  }


  /**
   * Sets the value of the 'bowler' field.
   * @param value the value to set.
   */
  public void setBowler(java.lang.CharSequence value) {
    this.bowler = value;
  }

  /**
   * Gets the value of the 'batsman_runs' field.
   * @return The value of the 'batsman_runs' field.
   */
  public int getBatsmanRuns() {
    return batsman_runs;
  }


  /**
   * Sets the value of the 'batsman_runs' field.
   * @param value the value to set.
   */
  public void setBatsmanRuns(int value) {
    this.batsman_runs = value;
  }

  /**
   * Gets the value of the 'extra_runs' field.
   * @return The value of the 'extra_runs' field.
   */
  public int getExtraRuns() {
    return extra_runs;
  }


  /**
   * Sets the value of the 'extra_runs' field.
   * @param value the value to set.
   */
  public void setExtraRuns(int value) {
    this.extra_runs = value;
  }

  /**
   * Gets the value of the 'total_runs' field.
   * @return The value of the 'total_runs' field.
   */
  public int getTotalRuns() {
    return total_runs;
  }


  /**
   * Sets the value of the 'total_runs' field.
   * @param value the value to set.
   */
  public void setTotalRuns(int value) {
    this.total_runs = value;
  }

  /**
   * Gets the value of the 'non_boundary' field.
   * @return The value of the 'non_boundary' field.
   */
  public int getNonBoundary() {
    return non_boundary;
  }


  /**
   * Sets the value of the 'non_boundary' field.
   * @param value the value to set.
   */
  public void setNonBoundary(int value) {
    this.non_boundary = value;
  }

  /**
   * Gets the value of the 'is_wicket' field.
   * @return The value of the 'is_wicket' field.
   */
  public int getIsWicket() {
    return is_wicket;
  }


  /**
   * Sets the value of the 'is_wicket' field.
   * @param value the value to set.
   */
  public void setIsWicket(int value) {
    this.is_wicket = value;
  }

  /**
   * Gets the value of the 'dismissal_kind' field.
   * @return The value of the 'dismissal_kind' field.
   */
  public java.lang.CharSequence getDismissalKind() {
    return dismissal_kind;
  }


  /**
   * Sets the value of the 'dismissal_kind' field.
   * @param value the value to set.
   */
  public void setDismissalKind(java.lang.CharSequence value) {
    this.dismissal_kind = value;
  }

  /**
   * Gets the value of the 'player_dismissed' field.
   * @return The value of the 'player_dismissed' field.
   */
  public java.lang.CharSequence getPlayerDismissed() {
    return player_dismissed;
  }


  /**
   * Sets the value of the 'player_dismissed' field.
   * @param value the value to set.
   */
  public void setPlayerDismissed(java.lang.CharSequence value) {
    this.player_dismissed = value;
  }

  /**
   * Gets the value of the 'fielder' field.
   * @return The value of the 'fielder' field.
   */
  public java.lang.CharSequence getFielder() {
    return fielder;
  }


  /**
   * Sets the value of the 'fielder' field.
   * @param value the value to set.
   */
  public void setFielder(java.lang.CharSequence value) {
    this.fielder = value;
  }

  /**
   * Gets the value of the 'extras_type' field.
   * @return The value of the 'extras_type' field.
   */
  public java.lang.CharSequence getExtrasType() {
    return extras_type;
  }


  /**
   * Sets the value of the 'extras_type' field.
   * @param value the value to set.
   */
  public void setExtrasType(java.lang.CharSequence value) {
    this.extras_type = value;
  }

  /**
   * Gets the value of the 'batting_team' field.
   * @return The value of the 'batting_team' field.
   */
  public java.lang.CharSequence getBattingTeam() {
    return batting_team;
  }


  /**
   * Sets the value of the 'batting_team' field.
   * @param value the value to set.
   */
  public void setBattingTeam(java.lang.CharSequence value) {
    this.batting_team = value;
  }

  /**
   * Gets the value of the 'bowling_team' field.
   * @return The value of the 'bowling_team' field.
   */
  public java.lang.CharSequence getBowlingTeam() {
    return bowling_team;
  }


  /**
   * Sets the value of the 'bowling_team' field.
   * @param value the value to set.
   */
  public void setBowlingTeam(java.lang.CharSequence value) {
    this.bowling_team = value;
  }

  /**
   * Creates a new CricketScore RecordBuilder.
   * @return A new CricketScore RecordBuilder
   */
  public static CricketScore.Builder newBuilder() {
    return new CricketScore.Builder();
  }

  /**
   * Creates a new CricketScore RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CricketScore RecordBuilder
   */
  public static CricketScore.Builder newBuilder(CricketScore.Builder other) {
    if (other == null) {
      return new CricketScore.Builder();
    } else {
      return new CricketScore.Builder(other);
    }
  }

  /**
   * Creates a new CricketScore RecordBuilder by copying an existing CricketScore instance.
   * @param other The existing instance to copy.
   * @return A new CricketScore RecordBuilder
   */
  public static CricketScore.Builder newBuilder(CricketScore other) {
    if (other == null) {
      return new CricketScore.Builder();
    } else {
      return new CricketScore.Builder(other);
    }
  }

  /**
   * RecordBuilder for CricketScore instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CricketScore>
    implements org.apache.avro.data.RecordBuilder<CricketScore> {

    private java.lang.CharSequence id;
    private int inning;
    private int over;
    private int ball;
    private java.lang.CharSequence batsman;
    private java.lang.CharSequence non_striker;
    private java.lang.CharSequence bowler;
    private int batsman_runs;
    private int extra_runs;
    private int total_runs;
    private int non_boundary;
    private int is_wicket;
    private java.lang.CharSequence dismissal_kind;
    private java.lang.CharSequence player_dismissed;
    private java.lang.CharSequence fielder;
    private java.lang.CharSequence extras_type;
    private java.lang.CharSequence batting_team;
    private java.lang.CharSequence bowling_team;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(CricketScore.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.inning)) {
        this.inning = data().deepCopy(fields()[1].schema(), other.inning);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.over)) {
        this.over = data().deepCopy(fields()[2].schema(), other.over);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ball)) {
        this.ball = data().deepCopy(fields()[3].schema(), other.ball);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.batsman)) {
        this.batsman = data().deepCopy(fields()[4].schema(), other.batsman);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.non_striker)) {
        this.non_striker = data().deepCopy(fields()[5].schema(), other.non_striker);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.bowler)) {
        this.bowler = data().deepCopy(fields()[6].schema(), other.bowler);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.batsman_runs)) {
        this.batsman_runs = data().deepCopy(fields()[7].schema(), other.batsman_runs);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.extra_runs)) {
        this.extra_runs = data().deepCopy(fields()[8].schema(), other.extra_runs);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.total_runs)) {
        this.total_runs = data().deepCopy(fields()[9].schema(), other.total_runs);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.non_boundary)) {
        this.non_boundary = data().deepCopy(fields()[10].schema(), other.non_boundary);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.is_wicket)) {
        this.is_wicket = data().deepCopy(fields()[11].schema(), other.is_wicket);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.dismissal_kind)) {
        this.dismissal_kind = data().deepCopy(fields()[12].schema(), other.dismissal_kind);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.player_dismissed)) {
        this.player_dismissed = data().deepCopy(fields()[13].schema(), other.player_dismissed);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.fielder)) {
        this.fielder = data().deepCopy(fields()[14].schema(), other.fielder);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.extras_type)) {
        this.extras_type = data().deepCopy(fields()[15].schema(), other.extras_type);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.batting_team)) {
        this.batting_team = data().deepCopy(fields()[16].schema(), other.batting_team);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.bowling_team)) {
        this.bowling_team = data().deepCopy(fields()[17].schema(), other.bowling_team);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
    }

    /**
     * Creates a Builder by copying an existing CricketScore instance
     * @param other The existing instance to copy.
     */
    private Builder(CricketScore other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.inning)) {
        this.inning = data().deepCopy(fields()[1].schema(), other.inning);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.over)) {
        this.over = data().deepCopy(fields()[2].schema(), other.over);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ball)) {
        this.ball = data().deepCopy(fields()[3].schema(), other.ball);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.batsman)) {
        this.batsman = data().deepCopy(fields()[4].schema(), other.batsman);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.non_striker)) {
        this.non_striker = data().deepCopy(fields()[5].schema(), other.non_striker);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bowler)) {
        this.bowler = data().deepCopy(fields()[6].schema(), other.bowler);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.batsman_runs)) {
        this.batsman_runs = data().deepCopy(fields()[7].schema(), other.batsman_runs);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.extra_runs)) {
        this.extra_runs = data().deepCopy(fields()[8].schema(), other.extra_runs);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.total_runs)) {
        this.total_runs = data().deepCopy(fields()[9].schema(), other.total_runs);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.non_boundary)) {
        this.non_boundary = data().deepCopy(fields()[10].schema(), other.non_boundary);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.is_wicket)) {
        this.is_wicket = data().deepCopy(fields()[11].schema(), other.is_wicket);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.dismissal_kind)) {
        this.dismissal_kind = data().deepCopy(fields()[12].schema(), other.dismissal_kind);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.player_dismissed)) {
        this.player_dismissed = data().deepCopy(fields()[13].schema(), other.player_dismissed);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.fielder)) {
        this.fielder = data().deepCopy(fields()[14].schema(), other.fielder);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.extras_type)) {
        this.extras_type = data().deepCopy(fields()[15].schema(), other.extras_type);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.batting_team)) {
        this.batting_team = data().deepCopy(fields()[16].schema(), other.batting_team);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.bowling_team)) {
        this.bowling_team = data().deepCopy(fields()[17].schema(), other.bowling_team);
        fieldSetFlags()[17] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public CricketScore.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public CricketScore.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'inning' field.
      * @return The value.
      */
    public int getInning() {
      return inning;
    }


    /**
      * Sets the value of the 'inning' field.
      * @param value The value of 'inning'.
      * @return This builder.
      */
    public CricketScore.Builder setInning(int value) {
      validate(fields()[1], value);
      this.inning = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'inning' field has been set.
      * @return True if the 'inning' field has been set, false otherwise.
      */
    public boolean hasInning() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'inning' field.
      * @return This builder.
      */
    public CricketScore.Builder clearInning() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'over' field.
      * @return The value.
      */
    public int getOver() {
      return over;
    }


    /**
      * Sets the value of the 'over' field.
      * @param value The value of 'over'.
      * @return This builder.
      */
    public CricketScore.Builder setOver(int value) {
      validate(fields()[2], value);
      this.over = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'over' field has been set.
      * @return True if the 'over' field has been set, false otherwise.
      */
    public boolean hasOver() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'over' field.
      * @return This builder.
      */
    public CricketScore.Builder clearOver() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ball' field.
      * @return The value.
      */
    public int getBall() {
      return ball;
    }


    /**
      * Sets the value of the 'ball' field.
      * @param value The value of 'ball'.
      * @return This builder.
      */
    public CricketScore.Builder setBall(int value) {
      validate(fields()[3], value);
      this.ball = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ball' field has been set.
      * @return True if the 'ball' field has been set, false otherwise.
      */
    public boolean hasBall() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ball' field.
      * @return This builder.
      */
    public CricketScore.Builder clearBall() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'batsman' field.
      * @return The value.
      */
    public java.lang.CharSequence getBatsman() {
      return batsman;
    }


    /**
      * Sets the value of the 'batsman' field.
      * @param value The value of 'batsman'.
      * @return This builder.
      */
    public CricketScore.Builder setBatsman(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.batsman = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'batsman' field has been set.
      * @return True if the 'batsman' field has been set, false otherwise.
      */
    public boolean hasBatsman() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'batsman' field.
      * @return This builder.
      */
    public CricketScore.Builder clearBatsman() {
      batsman = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'non_striker' field.
      * @return The value.
      */
    public java.lang.CharSequence getNonStriker() {
      return non_striker;
    }


    /**
      * Sets the value of the 'non_striker' field.
      * @param value The value of 'non_striker'.
      * @return This builder.
      */
    public CricketScore.Builder setNonStriker(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.non_striker = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'non_striker' field has been set.
      * @return True if the 'non_striker' field has been set, false otherwise.
      */
    public boolean hasNonStriker() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'non_striker' field.
      * @return This builder.
      */
    public CricketScore.Builder clearNonStriker() {
      non_striker = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'bowler' field.
      * @return The value.
      */
    public java.lang.CharSequence getBowler() {
      return bowler;
    }


    /**
      * Sets the value of the 'bowler' field.
      * @param value The value of 'bowler'.
      * @return This builder.
      */
    public CricketScore.Builder setBowler(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.bowler = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'bowler' field has been set.
      * @return True if the 'bowler' field has been set, false otherwise.
      */
    public boolean hasBowler() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'bowler' field.
      * @return This builder.
      */
    public CricketScore.Builder clearBowler() {
      bowler = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'batsman_runs' field.
      * @return The value.
      */
    public int getBatsmanRuns() {
      return batsman_runs;
    }


    /**
      * Sets the value of the 'batsman_runs' field.
      * @param value The value of 'batsman_runs'.
      * @return This builder.
      */
    public CricketScore.Builder setBatsmanRuns(int value) {
      validate(fields()[7], value);
      this.batsman_runs = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'batsman_runs' field has been set.
      * @return True if the 'batsman_runs' field has been set, false otherwise.
      */
    public boolean hasBatsmanRuns() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'batsman_runs' field.
      * @return This builder.
      */
    public CricketScore.Builder clearBatsmanRuns() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'extra_runs' field.
      * @return The value.
      */
    public int getExtraRuns() {
      return extra_runs;
    }


    /**
      * Sets the value of the 'extra_runs' field.
      * @param value The value of 'extra_runs'.
      * @return This builder.
      */
    public CricketScore.Builder setExtraRuns(int value) {
      validate(fields()[8], value);
      this.extra_runs = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'extra_runs' field has been set.
      * @return True if the 'extra_runs' field has been set, false otherwise.
      */
    public boolean hasExtraRuns() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'extra_runs' field.
      * @return This builder.
      */
    public CricketScore.Builder clearExtraRuns() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_runs' field.
      * @return The value.
      */
    public int getTotalRuns() {
      return total_runs;
    }


    /**
      * Sets the value of the 'total_runs' field.
      * @param value The value of 'total_runs'.
      * @return This builder.
      */
    public CricketScore.Builder setTotalRuns(int value) {
      validate(fields()[9], value);
      this.total_runs = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'total_runs' field has been set.
      * @return True if the 'total_runs' field has been set, false otherwise.
      */
    public boolean hasTotalRuns() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'total_runs' field.
      * @return This builder.
      */
    public CricketScore.Builder clearTotalRuns() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'non_boundary' field.
      * @return The value.
      */
    public int getNonBoundary() {
      return non_boundary;
    }


    /**
      * Sets the value of the 'non_boundary' field.
      * @param value The value of 'non_boundary'.
      * @return This builder.
      */
    public CricketScore.Builder setNonBoundary(int value) {
      validate(fields()[10], value);
      this.non_boundary = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'non_boundary' field has been set.
      * @return True if the 'non_boundary' field has been set, false otherwise.
      */
    public boolean hasNonBoundary() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'non_boundary' field.
      * @return This builder.
      */
    public CricketScore.Builder clearNonBoundary() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'is_wicket' field.
      * @return The value.
      */
    public int getIsWicket() {
      return is_wicket;
    }


    /**
      * Sets the value of the 'is_wicket' field.
      * @param value The value of 'is_wicket'.
      * @return This builder.
      */
    public CricketScore.Builder setIsWicket(int value) {
      validate(fields()[11], value);
      this.is_wicket = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'is_wicket' field has been set.
      * @return True if the 'is_wicket' field has been set, false otherwise.
      */
    public boolean hasIsWicket() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'is_wicket' field.
      * @return This builder.
      */
    public CricketScore.Builder clearIsWicket() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'dismissal_kind' field.
      * @return The value.
      */
    public java.lang.CharSequence getDismissalKind() {
      return dismissal_kind;
    }


    /**
      * Sets the value of the 'dismissal_kind' field.
      * @param value The value of 'dismissal_kind'.
      * @return This builder.
      */
    public CricketScore.Builder setDismissalKind(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.dismissal_kind = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'dismissal_kind' field has been set.
      * @return True if the 'dismissal_kind' field has been set, false otherwise.
      */
    public boolean hasDismissalKind() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'dismissal_kind' field.
      * @return This builder.
      */
    public CricketScore.Builder clearDismissalKind() {
      dismissal_kind = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'player_dismissed' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlayerDismissed() {
      return player_dismissed;
    }


    /**
      * Sets the value of the 'player_dismissed' field.
      * @param value The value of 'player_dismissed'.
      * @return This builder.
      */
    public CricketScore.Builder setPlayerDismissed(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.player_dismissed = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'player_dismissed' field has been set.
      * @return True if the 'player_dismissed' field has been set, false otherwise.
      */
    public boolean hasPlayerDismissed() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'player_dismissed' field.
      * @return This builder.
      */
    public CricketScore.Builder clearPlayerDismissed() {
      player_dismissed = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'fielder' field.
      * @return The value.
      */
    public java.lang.CharSequence getFielder() {
      return fielder;
    }


    /**
      * Sets the value of the 'fielder' field.
      * @param value The value of 'fielder'.
      * @return This builder.
      */
    public CricketScore.Builder setFielder(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.fielder = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'fielder' field has been set.
      * @return True if the 'fielder' field has been set, false otherwise.
      */
    public boolean hasFielder() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'fielder' field.
      * @return This builder.
      */
    public CricketScore.Builder clearFielder() {
      fielder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'extras_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getExtrasType() {
      return extras_type;
    }


    /**
      * Sets the value of the 'extras_type' field.
      * @param value The value of 'extras_type'.
      * @return This builder.
      */
    public CricketScore.Builder setExtrasType(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.extras_type = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'extras_type' field has been set.
      * @return True if the 'extras_type' field has been set, false otherwise.
      */
    public boolean hasExtrasType() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'extras_type' field.
      * @return This builder.
      */
    public CricketScore.Builder clearExtrasType() {
      extras_type = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'batting_team' field.
      * @return The value.
      */
    public java.lang.CharSequence getBattingTeam() {
      return batting_team;
    }


    /**
      * Sets the value of the 'batting_team' field.
      * @param value The value of 'batting_team'.
      * @return This builder.
      */
    public CricketScore.Builder setBattingTeam(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.batting_team = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'batting_team' field has been set.
      * @return True if the 'batting_team' field has been set, false otherwise.
      */
    public boolean hasBattingTeam() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'batting_team' field.
      * @return This builder.
      */
    public CricketScore.Builder clearBattingTeam() {
      batting_team = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'bowling_team' field.
      * @return The value.
      */
    public java.lang.CharSequence getBowlingTeam() {
      return bowling_team;
    }


    /**
      * Sets the value of the 'bowling_team' field.
      * @param value The value of 'bowling_team'.
      * @return This builder.
      */
    public CricketScore.Builder setBowlingTeam(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.bowling_team = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'bowling_team' field has been set.
      * @return True if the 'bowling_team' field has been set, false otherwise.
      */
    public boolean hasBowlingTeam() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'bowling_team' field.
      * @return This builder.
      */
    public CricketScore.Builder clearBowlingTeam() {
      bowling_team = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CricketScore build() {
      try {
        CricketScore record = new CricketScore();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.inning = fieldSetFlags()[1] ? this.inning : (java.lang.Integer) defaultValue(fields()[1]);
        record.over = fieldSetFlags()[2] ? this.over : (java.lang.Integer) defaultValue(fields()[2]);
        record.ball = fieldSetFlags()[3] ? this.ball : (java.lang.Integer) defaultValue(fields()[3]);
        record.batsman = fieldSetFlags()[4] ? this.batsman : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.non_striker = fieldSetFlags()[5] ? this.non_striker : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.bowler = fieldSetFlags()[6] ? this.bowler : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.batsman_runs = fieldSetFlags()[7] ? this.batsman_runs : (java.lang.Integer) defaultValue(fields()[7]);
        record.extra_runs = fieldSetFlags()[8] ? this.extra_runs : (java.lang.Integer) defaultValue(fields()[8]);
        record.total_runs = fieldSetFlags()[9] ? this.total_runs : (java.lang.Integer) defaultValue(fields()[9]);
        record.non_boundary = fieldSetFlags()[10] ? this.non_boundary : (java.lang.Integer) defaultValue(fields()[10]);
        record.is_wicket = fieldSetFlags()[11] ? this.is_wicket : (java.lang.Integer) defaultValue(fields()[11]);
        record.dismissal_kind = fieldSetFlags()[12] ? this.dismissal_kind : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.player_dismissed = fieldSetFlags()[13] ? this.player_dismissed : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.fielder = fieldSetFlags()[14] ? this.fielder : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.extras_type = fieldSetFlags()[15] ? this.extras_type : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.batting_team = fieldSetFlags()[16] ? this.batting_team : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.bowling_team = fieldSetFlags()[17] ? this.bowling_team : (java.lang.CharSequence) defaultValue(fields()[17]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CricketScore>
    WRITER$ = (org.apache.avro.io.DatumWriter<CricketScore>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CricketScore>
    READER$ = (org.apache.avro.io.DatumReader<CricketScore>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeInt(this.inning);

    out.writeInt(this.over);

    out.writeInt(this.ball);

    out.writeString(this.batsman);

    out.writeString(this.non_striker);

    out.writeString(this.bowler);

    out.writeInt(this.batsman_runs);

    out.writeInt(this.extra_runs);

    out.writeInt(this.total_runs);

    out.writeInt(this.non_boundary);

    out.writeInt(this.is_wicket);

    out.writeString(this.dismissal_kind);

    out.writeString(this.player_dismissed);

    out.writeString(this.fielder);

    out.writeString(this.extras_type);

    out.writeString(this.batting_team);

    out.writeString(this.bowling_team);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.inning = in.readInt();

      this.over = in.readInt();

      this.ball = in.readInt();

      this.batsman = in.readString(this.batsman instanceof Utf8 ? (Utf8)this.batsman : null);

      this.non_striker = in.readString(this.non_striker instanceof Utf8 ? (Utf8)this.non_striker : null);

      this.bowler = in.readString(this.bowler instanceof Utf8 ? (Utf8)this.bowler : null);

      this.batsman_runs = in.readInt();

      this.extra_runs = in.readInt();

      this.total_runs = in.readInt();

      this.non_boundary = in.readInt();

      this.is_wicket = in.readInt();

      this.dismissal_kind = in.readString(this.dismissal_kind instanceof Utf8 ? (Utf8)this.dismissal_kind : null);

      this.player_dismissed = in.readString(this.player_dismissed instanceof Utf8 ? (Utf8)this.player_dismissed : null);

      this.fielder = in.readString(this.fielder instanceof Utf8 ? (Utf8)this.fielder : null);

      this.extras_type = in.readString(this.extras_type instanceof Utf8 ? (Utf8)this.extras_type : null);

      this.batting_team = in.readString(this.batting_team instanceof Utf8 ? (Utf8)this.batting_team : null);

      this.bowling_team = in.readString(this.bowling_team instanceof Utf8 ? (Utf8)this.bowling_team : null);

    } else {
      for (int i = 0; i < 18; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.inning = in.readInt();
          break;

        case 2:
          this.over = in.readInt();
          break;

        case 3:
          this.ball = in.readInt();
          break;

        case 4:
          this.batsman = in.readString(this.batsman instanceof Utf8 ? (Utf8)this.batsman : null);
          break;

        case 5:
          this.non_striker = in.readString(this.non_striker instanceof Utf8 ? (Utf8)this.non_striker : null);
          break;

        case 6:
          this.bowler = in.readString(this.bowler instanceof Utf8 ? (Utf8)this.bowler : null);
          break;

        case 7:
          this.batsman_runs = in.readInt();
          break;

        case 8:
          this.extra_runs = in.readInt();
          break;

        case 9:
          this.total_runs = in.readInt();
          break;

        case 10:
          this.non_boundary = in.readInt();
          break;

        case 11:
          this.is_wicket = in.readInt();
          break;

        case 12:
          this.dismissal_kind = in.readString(this.dismissal_kind instanceof Utf8 ? (Utf8)this.dismissal_kind : null);
          break;

        case 13:
          this.player_dismissed = in.readString(this.player_dismissed instanceof Utf8 ? (Utf8)this.player_dismissed : null);
          break;

        case 14:
          this.fielder = in.readString(this.fielder instanceof Utf8 ? (Utf8)this.fielder : null);
          break;

        case 15:
          this.extras_type = in.readString(this.extras_type instanceof Utf8 ? (Utf8)this.extras_type : null);
          break;

        case 16:
          this.batting_team = in.readString(this.batting_team instanceof Utf8 ? (Utf8)this.batting_team : null);
          break;

        case 17:
          this.bowling_team = in.readString(this.bowling_team instanceof Utf8 ? (Utf8)this.bowling_team : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










